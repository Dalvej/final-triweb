{"version":3,"sources":["modules/_nav.scss","defaults/_mixins.scss","modules/_header.scss","modules/_cases.scss","defaults/_functions.scss","app.scss"],"names":[],"mappings":"AAAA,0BAA0B;AAI1B,uBAAuB;AACvB;EACI,uBAJiB;EAKjB,YAAY;EACZ,cAAc;CAmEjB;;AAtED;EAOQ,aAXa;EAYb,gBAAgB;EAChB,OAAO;CCuJV;;ADhKL;EAaQ,eAAe;EACf,WAAW;EACX,UAAU;CCwIb;;ADvJL;EC4BE,YAAY;EACZ,eAAe;EACf,YAAY;CACZ;;AD/BF;ECkCE,YAAY;EACZ,eAAe;EACf,YAAY;CACZ;;ADrCF;ECWC,YDS6B;ECR7B,aDhBoB;EAyBT,mBAAmB;CC2I1B;;ADhKL;ECWC,YDeyB;ECdzB,aDc+B;CC6H3B;;ADvJL;EA6BY,aAjCS;EAkCT,0BAA0B;EAC1B,aAAa;EACb,sBAAsB;EACtB,0CAAkC;EAAlC,kCAAkC;CC+HzC;;ADhKL;EAoCgB,0BAA0B;CAK7B;;AAzCb;EAuCoB,YAAY;CACf;;AAxCjB;EA6CY,0BAA0B;CCmHjC;;ADhKL;EAkDQ,YAAY;EACZ,sBAAsB;CCoGzB;;ADvJL;EAsDY,YAAY;EACZ,mBAAmB;EACnB,kBA5DS;EA6DT,+BAAuB;EAAvB,uBAAuB;EACvB,0BAA0B;EAC1B,sBAAsB;CCqG7B;;ADhKL;EA8DgB,YAAY;CACf;;AA/Db;EAmEY,YAAY;CC6FnB;;ACrKL;EACI,uGAGM;EAHN,+FAGM;EACN,4BAA4B;EAC5B,uBAAuB;EAEvB,mBAAmB;EAEnB,cAAc;EACd,YAAY;CAgCf;;AA3CD;EAcQ,SAAS;EACT,mBAAmB;EACnB,oCAAqB;UAArB,4BAAqB;EACrB,YAAY;CD2If;;AC5JL;EAqBQ,eAAe;EACf,YAAY;EACZ,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,YAAY;EACZ,mBAAmB;EACnB,0BAA0B;EAC1B,oBAAoB;CD8HvB;;AC5JL;EAkCQ,eAAe;EACf,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,iBAAiB;EACjB,iBAAiB;EACjB,eAAa;EACb,mBAAmB;CDmHtB;;AE5JL;EF8GC,YGjGY;EDXT,2BAAY;EACZ,kBAAkB;CAgErB;;AAnED;EFgBC,YEVyB;EFWzB,aEX+B;EACxB,cAAc;CFqJjB;;AE5JL;EAWQ,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,sBAAsB;EACtB,YAAY;EACZ,UAAU;EACV,iCAAgC;CF2InC;;AE5JL;EAqBQ,YAAY;EACZ,aAAa;CFsIhB;;AE5JL;EA0BQ,WCbK;EDcL,YAAY;EACZ,aAAa;EACb,oBAAkB;CF+HrB;;AE5JL;EAiCQ,WCpBK;EDqBL,aAAa;EACb,YAAY;EACZ,mBAAmB;CFwHtB;;AE5JL;EAwCQ,YAAY;CFoHf;;AE5JL;EA4CQ,YAAY;EACZ,YAAY;CF+Gf;;AE5JL;EAiDQ,YAAY;CF2Gf;;AE5JL;EAqDQ,mBAAmB;EACnB,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,sBAAsB;EACtB,cAAc;EACd,UAAU;CFiGb;;AE5JL;EA+DQ,gBAAgB;CF6FnB;;AE5JL;EFiCE,YAAY;EACZ,eAAe;EACf,YAAY;CACZ;;AEpCF;EFuCE,YAAY;EACZ,eAAe;EACf,YAAY;CACZ;;AIlCF;EACI,qCAAqC;EACrC,iBAAiB;EAGjB,uBAAuB;EACvB,aAAa;CAChB","file":"app.css","sourcesContent":["/* Navigation variables */\r\n$nav-top-height: 50px;\r\n$nav-background: #000;\r\n\r\n/* Navigation module */\r\n.nav {\r\n    background-color: $nav-background;\r\n    width: 100%;\r\n    z-index: 9999;\r\n    \r\n    \r\n    @include m('nav-top') {\r\n        height: $nav-top-height;\r\n        position: fixed;\r\n        top: 0;\r\n    }\r\n    \r\n    @include e('list') {\r\n        display: block;\r\n        padding: 0;\r\n        margin: 0;\r\n        \r\n        @include cf;\r\n        \r\n        @include m('nav-top') {\r\n            @include size(100%, $nav-top-height);\r\n            text-align: center;\r\n        }\r\n    }\r\n\r\n    @include e('list-item') {\r\n        @include size(auto, 100%);\r\n        \r\n        @include m('nav-top') {\r\n            height: $nav-top-height;\r\n            background-color: inherit;\r\n            width: 150px;          \r\n            display: inline-block;\r\n            transition: background-color 0.4s;\r\n            \r\n            &:hover {\r\n                background-color: #ffffff;\r\n                \r\n                .nav__link--nav-top {\r\n                    color: #000;\r\n                }\r\n            }\r\n        }\r\n        \r\n        @include m('active') {\r\n            background-color: #ffffff;\r\n        }\r\n    }\r\n\r\n    @include e('link') {\r\n        color: #000;\r\n        text-decoration: none;\r\n        \r\n        @include m('nav-top') {\r\n            color: #fff;\r\n            text-align: center;\r\n            line-height: $nav-top-height;\r\n            transition: color 0.4s;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1.5px;\r\n            \r\n            &:hover {\r\n                color: #000;\r\n            }\r\n        }\r\n        \r\n        @include m('active') {\r\n            color: #000;\r\n        }\r\n    }\r\n}","/// Helper mixin to size elements in a single line.\r\n/// This mixin is essentially a short hand to define\r\n/// both `width` and `height` simultaneously.\r\n///\r\n/// @group Mixin\r\n///\r\n/// @param {Length} $width - Element's width\r\n/// @param {Length} $height [$width] - Element's height\r\n/// @output `width` and `height`\r\n///\r\n/// @example scss - Sizing `.foo`\r\n///   .foo {\r\n///     @include size(100%, 3em);\r\n///   }\r\n\r\n@mixin size($width, $height: $width) {\r\n\twidth: $width;\r\n\theight: $height;\r\n}\r\n\r\n/// A mixin to clear floats\r\n///\r\n/// @group Mixin\r\n///\r\n/// @outputs Outputs a micro clearfix hack\r\n///\r\n/// @example scss - Cleafixing `.foo`\r\n///   .foo {\r\n///   \t@include cf;\r\n///   }\r\n\r\n@mixin cf {\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}\r\n\r\n/// A mixin to make columns\r\n///\r\n/// @group Mixin\r\n///\r\n///\r\n/// @example scss - Column calculation `.foo`\r\n///   .foo {\r\n///   \t@include column(1, 3);\r\n///   }\r\n@mixin column($pos, $out-of) {\r\n\twidth: cp-column($pos, $out-of);\r\n\tmin-height: 1px;\r\n\tpadding: 0 $column-padding 0 $column-padding;\r\n\tfloat: left;\r\n}\r\n\r\n/// Fill the default container variables\r\n///\r\n/// @group Mixin\r\n///\r\n/// @example scss - Container sizing `.foo`\r\n///   .foo {\r\n///   \t@include grid;\r\n///   }\r\n@mixin grid {\r\n\tmin-height: 1px;\r\n\tmargin: 0 auto;\r\n\tpadding: 0 $column-padding;\r\n}\r\n\r\n/// Make a fixed width container\r\n///\r\n/// @group Mixin\r\n///\r\n/// @example scss - Container sizing `.foo`\r\n///   .foo {\r\n///   \t@include grid-fixed;\r\n///   }\r\n@mixin grid-fixed {\r\n\t@include breakpoint($media-screen-xs) {\r\n\t\t@include container-width('xs');\r\n\t}\t\r\n\t\r\n\t@include breakpoint($media-screen-sm) {\r\n\t\t@include container-width('sm');\r\n\t}\r\n\r\n\t@include breakpoint($media-screen-md) {\r\n\t\t@include container-width('md');\r\n\t}\r\n\r\n\t@include breakpoint($media-screen-lg) {\r\n\t\t@include container-width('lg');\r\n\t}\r\n}\r\n\r\n/// Make a full width container for grids\r\n///\r\n/// @group Mixin\r\n///\r\n/// @example scss - Container sizing `.foo`\r\n///   .foo {\r\n///   \t@include grid-full;\r\n///   }\r\n@mixin grid-full {\r\n\twidth: cp-column(1, 1);\r\n}\r\n\r\n/// Makes a row for columns\r\n///\r\n/// @group Mixin\r\n///\r\n/// @example scss - Row calulation `.foo`\r\n///   .foo {\r\n///   \t@include row;\r\n///   }\r\n@mixin row {\r\n\tmin-height: 1px;\r\n\t// Making a row always full width\r\n\tmargin-left: -$column-padding;\r\n\tmargin-right: -$column-padding;\r\n\r\n\t@include cf;\r\n}\r\n\r\n/// Returns the width of the fixed container according to the variable\r\n///\r\n/// @group Mixin\r\n///\r\n/// @example scss - Row calulation `.foo`\r\n///   .foo {\r\n///   \t@include container-width('xs');\r\n///   }\r\n@mixin container-width($media) {\r\n\t@if $media == 'xs' {\r\n\t\twidth: $container-width-xs;\r\n\t} @else if $media == 'sm' {\r\n\t\twidth: $container-width-sm;\r\n\t} @else if $media == 'md' {\r\n\t\twidth: $container-width-md;\r\n\t} @else if $media == 'lg' {\r\n\t\twidth: $container-width-lg;\r\n\t}\r\n}\r\n\r\n/// Block Element\r\n/// @access public\r\n/// @param {String} $element - Element's name\r\n@mixin e($element) {\r\n    &__#{$element} {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Block Modifier\r\n/// @access public\r\n/// @param {String} $modifier - Modifier's name\r\n@mixin m($modifier) {\r\n    &--#{$modifier} {\r\n        @content;\r\n    }\r\n}",".header {\r\n    background:linear-gradient(\r\n      rgba(0, 0, 0, 0.7), \r\n      rgba(0, 0, 0, 0.7)\r\n    ), url(\"/img/Frontpage.jpg\");\r\n    background-position: center;\r\n    background-size: cover;\r\n    \r\n    position: relative;\r\n    \r\n    height: 100vh;\r\n    width: 100%;\r\n    \r\n    @include e('center') {\r\n        top: 50%;\r\n        position: absolute;\r\n        transform: translateY(-50%);\r\n        width: 100%;\r\n    }\r\n    \r\n    @include e('h1') {\r\n        display: block;\r\n        width: 100%;\r\n        margin: 0;\r\n        padding: 0;\r\n        font-weight: 300;\r\n        font-size: 6em;\r\n        color: #fff;\r\n        text-align: center;\r\n        text-transform: uppercase;\r\n        letter-spacing: 7px;\r\n    }\r\n    \r\n    @include e('h2') {\r\n        display: block;\r\n        width: 100%;\r\n        margin: 0;\r\n        padding-top: 15px;\r\n        font-weight: 300;\r\n        font-size: 2.5em;\r\n        color: darken(#fff, 18%);\r\n        text-align: center;\r\n    }\r\n}",".cases {\r\n    @include grid-full;\r\n    height: calc(100vh - 50px);\r\n    padding-top: 50px;\r\n    \r\n    @include e('filler') {\r\n        @include size(100%, 50px);\r\n        display: none;\r\n    }\r\n    \r\n    @include e('heading') {\r\n        font-size: 2.6em;\r\n        font-weight: 300;\r\n        text-align: center;\r\n        letter-spacing: 3.5px;\r\n        color: #fff;\r\n        margin: 0;\r\n        border-bottom: 1px solid lighten(#000, 15%);\r\n    }\r\n    \r\n    @include e('image') {\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n    \r\n    @include e('sidebar') {\r\n        width: cp-column(1, 4);\r\n        float: left;\r\n        height: 100%;\r\n        background: darken(#1a1a1a, 3%);\r\n    }\r\n    \r\n    @include e('case-view') {\r\n        width: cp-column(3, 4);\r\n        height: 100%;\r\n        float: left;\r\n        overflow-y: scroll;\r\n    }\r\n    \r\n    @include e('list') {\r\n        width: 100%;\r\n    }\r\n    \r\n    @include e('list-item') {\r\n        width: 100%;\r\n        color: #fff;\r\n    }\r\n    \r\n    @include e('text-container') {\r\n        width: 100%;\r\n    }\r\n    \r\n    @include e('case-title') {\r\n        text-align: center;\r\n        font-size: 2.6em;\r\n        font-weight: 300;\r\n        text-align: center;\r\n        letter-spacing: 3.5px;\r\n        padding: 20px;\r\n        margin: 0;\r\n    }\r\n    \r\n    @include e('case-description') {\r\n        padding: 0 20px;\r\n    }\r\n    \r\n    @include cf;\r\n}","/// Function for calculating widths of columns\r\n///\r\n/// @group Functions\r\n///\r\n/// @param {Number} $pos - Current position in for loop\r\n/// @param {Number} $out-of [12] - Column count\r\n///\r\n/// @example scss - Width calculation `.foo`\r\n///   .foo {\r\n///   \twidth: cp-in-grid(3, 12);\r\n///   }\r\n\r\n@function cp-column($pos, $out-of: $columns) {\r\n\t@return $pos / $out-of * 100%;\r\n} ","@import \"defaults/breakpoint\";\r\n@import \"defaults/variables\";\r\n@import \"defaults/functions\";\r\n@import \"defaults/mixins\";\r\n@import \"modules/nav\";\r\n@import \"modules/header\";\r\n@import \"modules/cases\";\r\n\r\nhtml, body {\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 400;\r\n    -webkit-box-sizing: border-box;\r\n    -moz-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    height: 100%;\r\n}"],"sourceRoot":"/source/"}